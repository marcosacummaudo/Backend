servers:
  - url: /api/users
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          format: objectid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        age:
          type: integer
        password:
          type: string
          format: password
        cart:
          type: string
          format: objectid
        role:
          type: string
          enum:
            - admin
            - premium
            - user
          default: user
    PasswordReset:
      type: object
      properties:
        email:
          type: string
          format: email
    NewPassword:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
  parameters:
    UserIdParam:
      name: uid
      in: path
      required: true
      schema:
        type: string
        format: objectid
  responses:
    UserNotFound:
      description: User not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                type: string
    EmailAlreadyRegistered:
      description: The email is already registered
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
paths:
  /:
    post:
      tags:
      - User
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  origin:
                    type: string
                  payload:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/EmailAlreadyRegistered'
  /resetpass:
    post:
      tags:
      - User
      summary: Send reset password link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
      responses:
        '200':
          description: Reset password link sent successfully
        '400':
          description: Email not registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  origin:
                    type: string
                  payload:
                    type: string
  /insertNewPass:
    post:
      tags:
      - User
      summary: Insert new password after verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPassword'
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: Invalid password or email
          content:
            application/json:
              schema:
                type: object
                properties:
                  origin:
                    type: string
                  payload:
                    type: string
  /premium/{uid}:
    put:
      tags:
      - User
      summary: Change user's role to premium or back to user
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: User role updated successfully
        '400':
          $ref: '#/components/responses/UserNotFound'
